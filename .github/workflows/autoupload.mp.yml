name: Anaconda Build & Upload

on:
  push:
    branches:
      - '**'
    tags:
      - '*'

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      COMMIT_SHA: ${{ steps.git.outputs.COMMIT_SHA }}
      COMMIT_LATEST_TAG: ${{ steps.git.outputs.COMMIT_LATEST_TAG }}
      COMMIT_TAG: ${{ steps.git.outputs.COMMIT_TAG }}
      COMMIT_VERSION: ${{ steps.git.outputs.COMMIT_VERSION }}
      COMMIT_TYPE: ${{ steps.git.outputs.COMMIT_TYPE }}
      ANACONDA_LABEL: ${{ steps.anaconda.outputs.ANACONDA_LABEL }}
      ANACONDA_VERSION: ${{ steps.anaconda.outputs.ANACONDA_VERSION }}
      ANACONDA_PACKAGE: ${{ steps.anaconda.outputs.ANACONDA_PACKAGE }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0, fetch-tags: true }

      - id: git
        run: |
          COMMIT_SHA=$(git rev-parse HEAD || exit 1)
          [ -z "$COMMIT_SHA" ] || echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          [ -z "$COMMIT_SHA" ] || echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_OUTPUT
          COMMIT_LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          [ -z "$COMMIT_LATEST_TAG" ] || echo "COMMIT_LATEST_TAG=$COMMIT_LATEST_TAG" >> $GITHUB_ENV
          [ -z "$COMMIT_LATEST_TAG" ] || echo "COMMIT_LATEST_TAG=$COMMIT_LATEST_TAG" >> $GITHUB_OUTPUT
          [ "$GITHUB_REF_TYPE" == "tag" ] && COMMIT_TAG="$GITHUB_REF_NAME" || COMMIT_TAG=""
          [ -z "$COMMIT_TAG" ] && echo "COMMIT_TYPE=dev" >> $GITHUB_ENV    || echo "COMMIT_TAG=$COMMIT_TAG" >> $GITHUB_ENV
          [ -z "$COMMIT_TAG" ] && echo "COMMIT_TYPE=dev" >> $GITHUB_OUTPUT || echo "COMMIT_TAG=$COMMIT_TAG" >> $GITHUB_OUTPUT
          COMMIT_VERSION="${COMMIT_TAG:-${COMMIT_LATEST_TAG}}"
          [ -z "$COMMIT_VERSION" ] || echo "COMMIT_VERSION=$COMMIT_VERSION" >> $GITHUB_ENV
          [ -z "$COMMIT_VERSION" ] || echo "COMMIT_VERSION=$COMMIT_VERSION" >> $GITHUB_OUTPUT

      - id: anaconda
        run: |
          [ -n "$COMMIT_TYPE" ] && COMMIT_TYPE="-$COMMIT_TYPE"
          [[ $COMMIT_VERSION == *-* ]] && ANACONDA_LABEL=${COMMIT_VERSION#*-} || ANACONDA_LABEL=""
          ANACONDA_PACKAGE=$(basename `git rev-parse --show-toplevel` | sed 's,-feedstock,,g')
          echo "ANACONDA_PACKAGE=$ANACONDA_PACKAGE" >> $GITHUB_ENV
          echo "ANACONDA_PACKAGE=$ANACONDA_PACKAGE" >> $GITHUB_OUTPUT
          ANACONDA_LABEL=${ANACONDA_LABEL:-main}
          echo "ANACONDA_LABEL=$ANACONDA_LABEL" >> $GITHUB_ENV
          echo "ANACONDA_LABEL=$ANACONDA_LABEL" >> $GITHUB_OUTPUT
          ANACONDA_VERSION=${COMMIT_VERSION//-/.}
          ANACONDA_VERSION=${ANACONDA_VERSION:-0.0.0}${COMMIT_TYPE//-/.}
          echo "ANACONDA_VERSION=$ANACONDA_VERSION" >> $GITHUB_ENV
          echo "ANACONDA_VERSION=$ANACONDA_VERSION" >> $GITHUB_OUTPUT

  # NEW: Prepare job renders variants from conda_build_config.yaml (selectors+zip_keys honored)
  prepare:
    runs-on: ubuntu-latest
    needs: env
    outputs:
      matrix: ${{ steps.mk.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup miniconda (conda-build only)
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          activate-environment: true
          python-version: "3.11"
          auto-activate-base: true
      - name: Install conda-build
        run: conda install -y -c conda-forge conda-build
      - id: mk
        name: Render recipe â†’ GHA matrix
        shell: bash -l {0}
        run: |
          python - <<'PY'
          import json, sys
          from conda_build.api import render
          # Render WITHOUT finalizing to preserve variant info straight from conda_build_config.yaml
          outs = render("recipe", finalize=False)
          matrix = []
          seen = set()
          for (meta, _, _) in outs:
            v = meta.config.variant
            # pick the knobs you want to drive the matrix (extend as needed)
            item = {
              "root": str(v.get("root","")),
              "c_stdlib": v.get("c_stdlib",""),
              "c_stdlib_version": str(v.get("c_stdlib_version","")),
              # add more keys if you use them in your CBC
            }
            key = json.dumps(item, sort_keys=True)
            if item["root"] and key not in seen:
              seen.add(key)
              matrix.append(item)
          # Emit as a JSON array for fromJSON()
          print("::set-output name=matrix::" + json.dumps({"include": matrix}))
          PY

  build:
    needs: [env, prepare]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    env:
      ANACONDA_PACKAGE: ${{ needs.env.outputs.ANACONDA_PACKAGE }}
      ANACONDA_VERSION: ${{ needs.env.outputs.ANACONDA_VERSION }}
      ANACONDA_LABEL:   ${{ needs.env.outputs.ANACONDA_LABEL }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup micromamba
        uses: mamba-org/setup-micromamba@v2
        with:
          micromamba-version: "latest"
          generate-run-shell: true
          cache-environment: true
          environment-file: |
            name: build
            channels: [conda-forge, defaults, hep-forge]
            dependencies:
              - python
              - conda-build
              - boa
              - anaconda-client
              - conda-package-handling
              - ccache
              - pkg-config

      - name: Cache conda-bld
        uses: actions/cache@v4
        with:
          path: ~/micromamba/conda-bld
          key: conda-bld-${{ runner.os }}-${{ hashFiles('recipe/**') }}-${{ matrix.root }}

      - name: Configure ccache
        run: |
          echo "max_size = 2G" > ~/.ccache/ccache.conf
          echo "compiler_check = content" >> ~/.ccache/ccache.conf
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "CC='ccache gcc'"  >> $GITHUB_ENV
          echo "CXX='ccache g++'" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER_LAUNCHER=ccache" >> $GITHUB_ENV
          echo "CMAKE_C_COMPILER_LAUNCHER=ccache"   >> $GITHUB_ENV

      - name: Build (one variant from CBC)
        shell: bash -l {0}
        run: |
          # Pass ONLY the current variant back to mambabuild. This preserves your CBC logic but avoids sequential builds.
          VAR_JSON=$(jq -nc \
            --arg root "${{ matrix.root }}" \
            --arg c_stdlib "${{ matrix.c_stdlib }}" \
            --arg c_stdlib_version "${{ matrix.c_stdlib_version }}" \
            '{root: [$root], c_stdlib: [$c_stdlib], c_stdlib_version: [$c_stdlib_version]}')
          echo "Selected variant: $VAR_JSON"
          mamba mambabuild recipe --variants "$VAR_JSON" --output-folder pkgs

          # Optional: transmute to .conda
          for PKG in $(find pkgs -name "*.tar.bz2"); do
            conda convert --platform linux-64 "$PKG" -o pkgs >/dev/null 2>&1 || true
          done

      - uses: actions/upload-artifact@v4
        with:
          name: conda-packages-${{ matrix.root }}
          path: pkgs/**/*
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs: [env, build]
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: conda-packages-*
          merge-multiple: true
          path: pkgs

      - name: Setup micromamba (client)
        uses: mamba-org/setup-micromamba@v2
        with:
          micromamba-version: "latest"
          generate-run-shell: true
          environment-file: |
            name: upload
            channels: [conda-forge]
            dependencies: [anaconda-client]

      - name: Upload to Anaconda
        env:
          ANACONDA_LABEL:   ${{ needs.env.outputs.ANACONDA_LABEL }}
          ANACONDA_PACKAGE: ${{ needs.env.outputs.ANACONDA_PACKAGE }}
          ANACONDA_VERSION: ${{ needs.env.outputs.ANACONDA_VERSION }}
          ANACONDA_API_TOKEN: ${{ secrets.ANACONDA_API_TOKEN }}
        shell: bash -l {0}
        run: |
          [ -z "$ANACONDA_VERSION" ] && exit 1
          find pkgs -type f -name "*.conda" -print0 | while IFS= read -r -d '' CONDA; do
            anaconda -t "$ANACONDA_API_TOKEN" upload --force "$CONDA" --label "$ANACONDA_LABEL"
          done
